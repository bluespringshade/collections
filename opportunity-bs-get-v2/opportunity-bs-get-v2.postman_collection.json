{
        "info": {
            "_postman_id": "7144c63e-8b97-4688-b8b3-a95fe35cd05d",
            "name": "opportunity-bs-get-v2",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
        },
        "item": [{
    "name": "Initialization",
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "exec": [
                    "function checkVariable(string){",
                    "    if(typeof pm.iterationData.get(string) == 'undefined') return JSON.stringify([]);",
                    "    let variable = pm.iterationData.get(string).split('|').join('');",
                    "    if(variable) {",
                    "        return JSON.stringify(JSON.parse(variable));",
                    "    }",
                    "    return JSON.stringify([]);",
                    "}",
                    "try {",
                    "    pm.globals.set('stub_subsprof', checkVariable('stub_subsprof'));",
                    "    pm.globals.set('whitelist_imei', checkVariable('whitelist_imei'));",
                    "    pm.globals.set('whitelist_imei_delete', checkVariable('whitelist_imei'));",
                    "    pm.globals.set('whitelist_location', checkVariable('whitelist_location'));",
                    "    pm.globals.set('whitelist_location_delete', checkVariable('whitelist_location'));",
                    "    pm.globals.set('whitelist_msisdn', checkVariable('whitelist_msisdn'));",
                    "    pm.globals.set('whitelist_msisdn_delete', checkVariable('whitelist_msisdn'));",
                    "    pm.globals.set('scv_multidim', checkVariable('scv_multidim'));",
                    "    pm.globals.set('scv_multidim_delete', checkVariable('scv_multidim'));",
                    "    pm.globals.set('counter', checkVariable('counter'));",
                    "    pm.globals.set('counter_delete', checkVariable('counter'));",
                    "} catch (error) {",
                    "    pm.globals.set('invalid_json_format', 'INVALID JSON FORMAT');",
                    "}"
                ],
                "type": "text/javascript"
            }
        },
        {
            "listen": "test",
            "script": {
                "exec": [
                    "function parseJSON(string){",
                    "    return JSON.parse(pm.globals.get(string));",
                    "}",
                    "",
                    "",
                    "function main() {",
                    "    try {",
                    "        if(pm.globals.get('invalid_json_format')){",
                    "            pm.test('Validate JSON FORMAT', () => {",
                    "                pm.expect.fail('INVALID JSON FORMAT');",
                    "            });",
                    "            pm.globals.set('invalid_json_format', null);",
                    "            postman.setNextRequest(null);",
                    "        } else {",
                    "            let stub_subsprof = parseJSON('stub_subsprof');",
                    "            let whitelist_imei_delete = parseJSON('whitelist_imei_delete');",
                    "            let whitelist_location_delete = parseJSON('whitelist_location_delete');",
                    "            let whitelist_msisdn_delete = parseJSON('whitelist_msisdn_delete');",
                    "            let scv_multidim_delete = parseJSON('scv_multidim_delete');",
                    "            let counter_delete = parseJSON('counter_delete');",
                    "",
                    "            if(stub_subsprof.length) {",
                    "                postman.setNextRequest('stub-subscriber-profile');",
                    "            } else if(whitelist_imei_delete.length) {",
                    "                postman.setNextRequest('scv-whitelist-imei-DELETE');",
                    "            } else if(whitelist_location_delete.length) {",
                    "                postman.setNextRequest('scv-whitelist-location-DELETE');",
                    "            } else if(whitelist_msisdn_delete.length) {",
                    "                postman.setNextRequest('scv-whitelist-msisdn-DELETE');",
                    "            } else if(scv_multidim_delete.length) {",
                    "                postman.setNextRequest('scv-multidim-vw-erin-DELETE');",
                    "            } else if(counter_delete.length) {",
                    "                postman.setNextRequest('c2p-counter-DELETE');",
                    "            } else {",
                    "                postman.setNextRequest('1_OLD_old-opportunity-bs-preprod-esb');",
                    "            }",
                    "        }",
                    "    } catch (error) {",
                    "        pm.test('Validate JSON FORMAT', () => {",
                    "            pm.expect.fail('INVALID JSON FORMAT');",
                    "        });",
                    "    }",
                    "}",
                    "",
                    "main();",
                    ""
                ],
                "type": "text/javascript"
            }
        }
    ],
    "request": {
        "method": "GET",
        "header": [],
        "url": {
            "raw": "localhost",
            "host": [
                "localhost"
            ]
        }
    },
    "response": []
},
{
    "name": "stub-subscriber-profile",
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "exec": [
                    "function parseJSON(string){",
                    "    return JSON.parse(pm.globals.get(string));",
                    "}",
                    "",
                    "function main() {",
                    "    let parameters = parseJSON('stub_subsprof');",
                    "    let parameter = parameters[0];",
                    "",
                    "    pm.globals.set('msisdn', parameter.Msisdn);",
                    "    pm.globals.set('bodyParam', JSON.stringify(parameter));",
                    "",
                    "    parameters.splice(0, 1);",
                    "    pm.globals.set('stub_subsprof', JSON.stringify(parameters));",
                    "}",
                    "",
                    "main();",
                    "",
                    ""
                ],
                "type": "text/javascript"
            }
        },
        {
            "listen": "test",
            "script": {
                "exec": [
                    "function parseJSON(string){",
                    "    return JSON.parse(pm.globals.get(string));",
                    "}",
                    "",
                    "function main() {",
                    "    let stub_subsprof = parseJSON('stub_subsprof');",
                    "    let whitelist_imei_delete = parseJSON('whitelist_imei_delete');",
                    "    let whitelist_location_delete = parseJSON('whitelist_location_delete');",
                    "    let whitelist_msisdn_delete = parseJSON('whitelist_msisdn_delete');",
                    "    let scv_multidim_delete = parseJSON('scv_multidim_delete');",
                    "    let counter_delete = parseJSON('counter_delete');",
                    "",
                    "    if(stub_subsprof.length) {",
                    "        postman.setNextRequest('stub-subscriber-profile');",
                    "    } else if(whitelist_imei_delete.length) {",
                    "        postman.setNextRequest('scv-whitelist-imei-DELETE');",
                    "    } else if(whitelist_location_delete.length) {",
                    "        postman.setNextRequest('scv-whitelist-location-DELETE');",
                    "    } else if(whitelist_msisdn_delete.length) {",
                    "        postman.setNextRequest('scv-whitelist-msisdn-DELETE');",
                    "    } else if(scv_multidim_delete.length) {",
                    "        postman.setNextRequest('scv-multidim-vw-erin-DELETE');",
                    "    } else if(counter_delete.length) {",
                    "        postman.setNextRequest('c2p-counter-DELETE');",
                    "    } else {",
                    "        postman.setNextRequest('1_OLD_old-opportunity-bs-preprod-esb');",
                    "    }",
                    "    pm.test('Verify HTTP Response Code', function () {",
                    "        pm.expect(pm.response.code).to.equal(200);",
                    "    });",
                    "}",
                    "",
                    "main();",
                    ""
                ],
                "type": "text/javascript"
            }
        }
    ],
    "request": {
        "method": "PUT",
        "header": [],
        "body": {
            "mode": "raw",
            "raw": "{{bodyParam}}",
            "options": {
                "raw": {
                    "language": "json"
                }
            }
        },
        "url": {
            "raw": "{{stub-subscriber-profile}}/{{msisdn}}",
            "host": [
                "{{stub-subscriber-profile}}"
            ],
            "path": [
                "{{msisdn}}"
            ]
        }
    },
    "response": []
},
{
    "name": "scv-whitelist-imei-DELETE",
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "exec": [
                    "function parseJSON(string){",
                    "    return JSON.parse(pm.globals.get(string));",
                    "}",
                    "",
                    "function main() {",
                    "    let whitelist_imei_delete = parseJSON('whitelist_imei_delete');",
                    "    let whitelist = whitelist_imei_delete[0];",
                    "",
                    "    pm.globals.set('imei', whitelist.imei);",
                    "    pm.globals.set('referencelabel', whitelist.referencelabel);",
                    "",
                    "    whitelist_imei_delete.splice(0, 1);",
                    "    pm.globals.set('whitelist_imei_delete', JSON.stringify(whitelist_imei_delete));",
                    "}",
                    "",
                    "main();",
                    ""
                ],
                "type": "text/javascript"
            }
        },
        {
            "listen": "test",
            "script": {
                "exec": [
                    "function parseJSON(string){",
                    "    return JSON.parse(pm.globals.get(string));",
                    "}",
                    "",
                    "function main() {",
                    "    let whitelist_imei_delete = parseJSON('whitelist_imei_delete');",
                    "    if(whitelist_imei_delete.length) {",
                    "        postman.setNextRequest('scv-whitelist-imei-DELETE');",
                    "    } else {",
                    "        postman.setNextRequest('scv-whitelist-imei-INSERT');",
                    "    }",
                    "}",
                    "",
                    "main();",
                    ""
                ],
                "type": "text/javascript"
            }
        }
    ],
    "request": {
        "method": "DELETE",
        "header": [],
        "body": {
            "mode": "raw",
            "raw": "",
            "options": {
                "raw": {
                    "language": "json"
                }
            }
        },
        "url": {
            "raw": "{{stub-master}}/scv-whitelist/imei?value={{imei}}&referencelabel={{referencelabel}}",
            "host": [
                "{{stub-master}}"
            ],
            "path": [
                "scv-whitelist",
                "imei"
            ],
            "query": [
                {
                    "key": "value",
                    "value": "{{imei}}"
                },
                {
                    "key": "referencelabel",
                    "value": "{{referencelabel}}"
                }
            ]
        }
    },
    "response": []
},
{
    "name": "scv-whitelist-imei-INSERT",
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "exec": [
                    "function main() {",
                    "    let whitelist_imei = JSON.parse(pm.globals.get('whitelist_imei'));",
                    "    let whitelist = whitelist_imei[0];",
                    "",
                    "    pm.globals.set('bodyParam', JSON.stringify(whitelist));",
                    "",
                    "    whitelist_imei.splice(0, 1);",
                    "    pm.globals.set('whitelist_imei', JSON.stringify(whitelist_imei));",
                    "}",
                    "",
                    "main();",
                    ""
                ],
                "type": "text/javascript"
            }
        },
        {
            "listen": "test",
            "script": {
                "exec": [
                    "function main() {",
                    "    let whitelist_imei = JSON.parse(pm.globals.get('whitelist_imei'));",
                    "    let whitelist_location_delete = JSON.parse(pm.globals.get('whitelist_location_delete'));",
                    "    let whitelist_msisdn_delete = JSON.parse(pm.globals.get('whitelist_msisdn_delete'));",
                    "    let scv_multidim_delete = JSON.parse(pm.globals.get('scv_multidim_delete'));",
                    "    let counter_delete = JSON.parse(pm.globals.get('counter_delete'));",
                    "    ",
                    "    if(whitelist_imei.length) {",
                    "        postman.setNextRequest('scv-whitelist-imei-INSERT');",
                    "    } else {",
                    "        if(whitelist_location_delete.length) {",
                    "            postman.setNextRequest('scv-whitelist-location-DELETE');",
                    "        } else if(whitelist_msisdn_delete.length) {",
                    "            postman.setNextRequest('scv-whitelist-msisdn-DELETE');",
                    "        } else if(scv_multidim_delete.length) {",
                    "            postman.setNextRequest('scv-multidim-vw-erin-DELETE');",
                    "        } else if(counter_delete.length) {",
                    "            postman.setNextRequest('c2p-counter-DELETE');",
                    "        } else {",
                    "            postman.setNextRequest('1_OLD_old-opportunity-bs-preprod-esb');",
                    "        }",
                    "    }",
                    "    pm.test('Verify HTTP Response Code', function () {",
                    "        pm.expect(pm.response.code).to.equal(200);",
                    "    });",
                    "}",
                    "",
                    "main();",
                    ""
                ],
                "type": "text/javascript"
            }
        }
    ],
    "request": {
        "method": "POST",
        "header": [],
        "body": {
            "mode": "raw",
            "raw": "{{bodyParam}}",
            "options": {
                "raw": {
                    "language": "json"
                }
            }
        },
        "url": {
            "raw": "{{stub-master}}/scv-whitelist/imei",
            "host": [
                "{{stub-master}}"
            ],
            "path": [
                "scv-whitelist",
                "imei"
            ]
        }
    },
    "response": []
},
{
    "name": "scv-whitelist-location-DELETE",
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "exec": [
                    "function parseJson(string){",
                    "    return JSON.parse(pm.globals.get(string));",
                    "}",
                    "",
                    "function main() {",
                    "    let whitelist_location_delete = parseJson('whitelist_location_delete');",
                    "    let whitelist = whitelist_location_delete[0];",
                    "",
                    "    pm.globals.set('location', whitelist.location);",
                    "    pm.globals.set('referencelabel', whitelist.referencelabel);",
                    "",
                    "    whitelist_location_delete.splice(0, 1);",
                    "    pm.globals.set('whitelist_location_delete', JSON.stringify(whitelist_location_delete));",
                    "}",
                    "",
                    "main();",
                    ""
                ],
                "type": "text/javascript"
            }
        },
        {
            "listen": "test",
            "script": {
                "exec": [
                    "function parseJson(string){",
                    "    return JSON.parse(pm.globals.get(string));",
                    "}",
                    "",
                    "function main() {",
                    "    let whitelist_location_delete = parseJson('whitelist_location_delete');",
                    "    if(whitelist_location_delete.length) {",
                    "        postman.setNextRequest('scv-whitelist-location-DELETE');",
                    "    } else {",
                    "        postman.setNextRequest('scv-whitelist-location-INSERT');",
                    "    }",
                    "}",
                    "",
                    "main();",
                    ""
                ],
                "type": "text/javascript"
            }
        }
    ],
    "request": {
        "method": "DELETE",
        "header": [],
        "body": {
            "mode": "raw",
            "raw": "",
            "options": {
                "raw": {
                    "language": "json"
                }
            }
        },
        "url": {
            "raw": "{{stub-master}}/scv-whitelist/location?value={{location}}&referencelabel={{referencelabel}}",
            "host": [
                "{{stub-master}}"
            ],
            "path": [
                "scv-whitelist",
                "location"
            ],
            "query": [
                {
                    "key": "value",
                    "value": "{{location}}"
                },
                {
                    "key": "referencelabel",
                    "value": "{{referencelabel}}"
                }
            ]
        }
    },
    "response": []
},
{
    "name": "scv-whitelist-location-INSERT",
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "exec": [
                    "function main() {",
                    "    let whitelist_location = JSON.parse(pm.globals.get('whitelist_location'));",
                    "    let whitelist = whitelist_location[0];",
                    "    ",
                    "    pm.globals.set('bodyParam', JSON.stringify(whitelist));",
                    "",
                    "    whitelist_location.splice(0, 1);",
                    "    pm.globals.set('whitelist_location', JSON.stringify(whitelist_location));",
                    "}",
                    "",
                    "main();",
                    ""
                ],
                "type": "text/javascript"
            }
        },
        {
            "listen": "test",
            "script": {
                "exec": [
                    "function main() {",
                    "    let whitelist_location = JSON.parse(pm.globals.get('whitelist_location'));",
                    "    let whitelist_msisdn_delete = JSON.parse(pm.globals.get('whitelist_msisdn_delete'));",
                    "    let scv_multidim_delete = JSON.parse(pm.globals.get('scv_multidim_delete'));",
                    "    let counter_delete = JSON.parse(pm.globals.get('counter_delete'));",
                    "    ",
                    "    if(whitelist_location.length) {",
                    "        postman.setNextRequest('scv-whitelist-location-INSERT');",
                    "    } else {",
                    "        if(whitelist_msisdn_delete.length) {",
                    "            postman.setNextRequest('scv-whitelist-msisdn-DELETE');",
                    "        } else if(scv_multidim_delete.length) {",
                    "            postman.setNextRequest('scv-multidim-vw-erin-DELETE');",
                    "        } else if(counter_delete.length) {",
                    "            postman.setNextRequest('c2p-counter-DELETE');",
                    "        } else {",
                    "            postman.setNextRequest('1_OLD_old-opportunity-bs-preprod-esb');",
                    "        }",
                    "    }",
                    "    pm.test('Verify HTTP Response Code', function () {",
                    "        pm.expect(pm.response.code).to.equal(200);",
                    "    });",
                    "}",
                    "",
                    "main();",
                    ""
                ],
                "type": "text/javascript"
            }
        }
    ],
    "request": {
        "method": "POST",
        "header": [],
        "body": {
            "mode": "raw",
            "raw": "{{bodyParam}}",
            "options": {
                "raw": {
                    "language": "json"
                }
            }
        },
        "url": {
            "raw": "{{stub-master}}/scv-whitelist/location",
            "host": [
                "{{stub-master}}"
            ],
            "path": [
                "scv-whitelist",
                "location"
            ]
        }
    },
    "response": []
},
{
    "name": "scv-whitelist-msisdn-DELETE",
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "exec": [
                    "function parseJson(string){",
                    "    return JSON.parse(pm.globals.get(string));",
                    "}",
                    "",
                    "function main() {",
                    "    let whitelist_msisdn_delete = parseJson('whitelist_msisdn_delete');",
                    "    let whitelist = whitelist_msisdn_delete[0];",
                    "",
                    "    pm.globals.set('msisdn', whitelist.msisdn);",
                    "    pm.globals.set('referencelabel', whitelist.referencelabel);",
                    "",
                    "    whitelist_msisdn_delete.splice(0, 1);",
                    "    pm.globals.set('whitelist_msisdn_delete', JSON.stringify(whitelist_msisdn_delete));",
                    "}",
                    "",
                    "main();",
                    ""
                ],
                "type": "text/javascript"
            }
        },
        {
            "listen": "test",
            "script": {
                "exec": [
                    "function parseJson(string){",
                    "    return JSON.parse(pm.globals.get(string));",
                    "}",
                    "",
                    "function main() {",
                    "    let whitelist_msisdn_delete = parseJson('whitelist_msisdn_delete');",
                    "    if(whitelist_msisdn_delete.length) {",
                    "        postman.setNextRequest('scv-whitelist-msisdn-DELETE');",
                    "    } else {",
                    "        postman.setNextRequest('scv-whitelist-msisdn-INSERT');",
                    "    }",
                    "}",
                    "",
                    "main();",
                    ""
                ],
                "type": "text/javascript"
            }
        }
    ],
    "request": {
        "method": "DELETE",
        "header": [],
        "body": {
            "mode": "raw",
            "raw": "",
            "options": {
                "raw": {
                    "language": "json"
                }
            }
        },
        "url": {
            "raw": "{{stub-master}}/scv-whitelist/msisdn?value={{msisdn}}&referencelabel={{referencelabel}}",
            "host": [
                "{{stub-master}}"
            ],
            "path": [
                "scv-whitelist",
                "msisdn"
            ],
            "query": [
                {
                    "key": "value",
                    "value": "{{msisdn}}"
                },
                {
                    "key": "referencelabel",
                    "value": "{{referencelabel}}"
                }
            ]
        }
    },
    "response": []
},
{
    "name": "scv-whitelist-msisdn-INSERT",
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "exec": [
                    "function main() {",
                    "    let whitelist_msisdn = JSON.parse(pm.globals.get('whitelist_msisdn'));",
                    "    let whitelist = whitelist_msisdn[0];",
                    "    ",
                    "    pm.globals.set('bodyParam', JSON.stringify(whitelist));",
                    "",
                    "    whitelist_msisdn.splice(0, 1);",
                    "    pm.globals.set('whitelist_msisdn', JSON.stringify(whitelist_msisdn));",
                    "}",
                    "",
                    "main();",
                    ""
                ],
                "type": "text/javascript"
            }
        },
        {
            "listen": "test",
            "script": {
                "exec": [
                    "function main() {",
                    "    let whitelist_msisdn = JSON.parse(pm.globals.get('whitelist_msisdn'));",
                    "    let scv_multidim_delete = JSON.parse(pm.globals.get('scv_multidim_delete'));",
                    "    let counter_delete = JSON.parse(pm.globals.get('counter_delete'));",
                    "    ",
                    "    if(whitelist_msisdn.length) {",
                    "        postman.setNextRequest('scv-whitelist-msisdn-INSERT');",
                    "    } else {",
                    "        if(scv_multidim_delete.length) {",
                    "            postman.setNextRequest('scv-multidim-vw-erin-DELETE');",
                    "        } else if(counter_delete.length) {",
                    "            postman.setNextRequest('c2p-counter-DELETE');",
                    "        } else {",
                    "            postman.setNextRequest('1_OLD_old-opportunity-bs-preprod-esb');",
                    "        }",
                    "    }",
                    "    pm.test('Verify HTTP Response Code', function () {",
                    "        pm.expect(pm.response.code).to.equal(200);",
                    "    });",
                    "}",
                    "",
                    "main();",
                    ""
                ],
                "type": "text/javascript"
            }
        }
    ],
    "request": {
        "method": "POST",
        "header": [],
        "body": {
            "mode": "raw",
            "raw": "{{bodyParam}}",
            "options": {
                "raw": {
                    "language": "json"
                }
            }
        },
        "url": {
            "raw": "{{stub-master}}/scv-whitelist/msisdn",
            "host": [
                "{{stub-master}}"
            ],
            "path": [
                "scv-whitelist",
                "msisdn"
            ]
        }
    },
    "response": []
},
{
    "name": "scv-multidim-vw-erin-DELETE",
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "exec": [
                    "function main() {",
                    "    let scv_multidim_delete = JSON.parse(pm.globals.get('scv_multidim_delete'));",
                    "    let vw_erin = scv_multidim_delete[0];",
                    "",
                    "    pm.globals.set('msisdn', vw_erin.msisdn);",
                    "",
                    "    scv_multidim_delete.splice(0, 1);",
                    "    pm.globals.set('scv_multidim_delete', JSON.stringify(scv_multidim_delete));",
                    "}",
                    "",
                    "main();",
                    ""
                ],
                "type": "text/javascript"
            }
        },
        {
            "listen": "test",
            "script": {
                "exec": [
                    "function main() {",
                    "    let scv_multidim_delete = JSON.parse(pm.globals.get('scv_multidim_delete'));",
                    "    if(scv_multidim_delete.length) {",
                    "        postman.setNextRequest('scv-multidim-vw-erin-DELETE');",
                    "    } else {",
                    "        postman.setNextRequest('scv-multidim-vw-erin-INSERT');",
                    "    }",
                    "}",
                    "",
                    "main();",
                    ""
                ],
                "type": "text/javascript"
            }
        }
    ],
    "request": {
        "method": "DELETE",
        "header": [],
        "body": {
            "mode": "raw",
            "raw": "",
            "options": {
                "raw": {
                    "language": "json"
                }
            }
        },
        "url": {
            "raw": "{{stub-master}}/scv-multidim/vw-erin?msisdn={{msisdn}}",
            "host": [
                "{{stub-master}}"
            ],
            "path": [
                "scv-multidim",
                "vw-erin"
            ],
            "query": [
                {
                    "key": "msisdn",
                    "value": "{{msisdn}}"
                }
            ]
        }
    },
    "response": []
},
{
    "name": "scv-multidim-vw-erin-INSERT",
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "exec": [
                    "function main() {",
                    "    let scv_multidim = JSON.parse(pm.globals.get('scv_multidim'));",
                    "    let vw_erin = scv_multidim[0];",
                    "    ",
                    "    pm.globals.set('bodyParam', JSON.stringify(vw_erin));",
                    "",
                    "    scv_multidim.splice(0, 1);",
                    "    pm.globals.set('scv_multidim', JSON.stringify(scv_multidim));",
                    "}",
                    "",
                    "main();",
                    ""
                ],
                "type": "text/javascript"
            }
        },
        {
            "listen": "test",
            "script": {
                "exec": [
                    "function main() {",
                    "    let scv_multidim = JSON.parse(pm.globals.get('scv_multidim'));",
                    "    let counter_delete = JSON.parse(pm.globals.get('counter_delete'));",
                    "    ",
                    "    if(scv_multidim.length) {",
                    "        postman.setNextRequest('scv-multidim-vw-erin-INSERT');",
                    "    } else {",
                    "        if(counter_delete.length) {",
                    "            postman.setNextRequest('c2p-counter-DELETE');",
                    "        } else {",
                    "            postman.setNextRequest('1_OLD_old-opportunity-bs-preprod-esb');",
                    "        }",
                    "    }",
                    "    pm.test('Verify HTTP Response Code', function () {",
                    "        pm.expect(pm.response.code).to.equal(200);",
                    "    });",
                    "}",
                    "",
                    "main();",
                    ""
                ],
                "type": "text/javascript"
            }
        }
    ],
    "request": {
        "method": "POST",
        "header": [],
        "body": {
            "mode": "raw",
            "raw": "{{bodyParam}}",
            "options": {
                "raw": {
                    "language": "json"
                }
            }
        },
        "url": {
            "raw": "{{stub-master}}/scv-multidim/vw-erin",
            "host": [
                "{{stub-master}}"
            ],
            "path": [
                "scv-multidim",
                "vw-erin"
            ]
        }
    },
    "response": []
},
{
    "name": "c2p-counter-DELETE",
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "exec": [
                    "function parseJson(string){",
                    "    return JSON.parse(pm.globals.get(string));",
                    "}",
                    "",
                    "function main() {",
                    "    let counter_delete = parseJson('counter_delete');",
                    "    let counter = counter_delete[0];",
                    "",
                    "    pm.globals.set('msisdn', counter.msisdn);",
                    "",
                    "    let msisdn = counter.msisdn;",
                    "    msisdn = msisdn.replace(/\\D/g,'');",
                    "    type = parseInt(msisdn);",
                    "",
                    "    pm.globals.set('type', type % 2 == 1 ? 'even' : 'odd');",
                    "",
                    "    counter_delete.splice(0, 1);",
                    "    pm.globals.set('counter_delete', JSON.stringify(counter_delete));",
                    "}",
                    "",
                    "main();",
                    ""
                ],
                "type": "text/javascript"
            }
        },
        {
            "listen": "test",
            "script": {
                "exec": [
                    "function parseJson(string){",
                    "    return JSON.parse(pm.globals.get(string));",
                    "}",
                    "",
                    "function main() {",
                    "    let counter_delete = parseJson('counter_delete');",
                    "    if(counter_delete.length) {",
                    "        postman.setNextRequest('c2p-counter-DELETE');",
                    "    } else {",
                    "        postman.setNextRequest('c2p-counter-INSERT');",
                    "    }",
                    "}",
                    "",
                    "main();",
                    ""
                ],
                "type": "text/javascript"
            }
        }
    ],
    "request": {
        "method": "DELETE",
        "header": [],
        "body": {
            "mode": "raw",
            "raw": "",
            "options": {
                "raw": {
                    "language": "json"
                }
            }
        },
        "url": {
            "raw": "{{stub-master}}/c2p/{{type}}?msisdn={{msisdn}}",
            "host": [
                "{{stub-master}}"
            ],
            "path": [
                "c2p",
                "{{type}}"
            ],
            "query": [
                {
                    "key": "msisdn",
                    "value": "{{msisdn}}"
                }
            ]
        }
    },
    "response": []
},
{
    "name": "c2p-counter-INSERT",
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "exec": [
                    "function main() {",
                    "    let counters = JSON.parse(pm.globals.get('counter'));",
                    "    let counter = counters[0];",
                    "",
                    "    let msisdn = counter.msisdn;",
                    "    msisdn = msisdn.replace(/\\D/g,'');",
                    "    type = parseInt(msisdn);",
                    "",
                    "    pm.globals.set('type', type % 2 == 1 ? 'even' : 'odd');",
                    "    pm.globals.set('bodyParam', JSON.stringify(counter));",
                    "",
                    "    counters.splice(0, 1);",
                    "    pm.globals.set('counter', JSON.stringify(counters));",
                    "}",
                    "",
                    "main();",
                    ""
                ],
                "type": "text/javascript"
            }
        },
        {
            "listen": "test",
            "script": {
                "exec": [
                    "function main() {",
                    "    let counters = JSON.parse(pm.globals.get('counter'));",
                    "    ",
                    "    if(counters.length) {",
                    "        postman.setNextRequest('c2p-counter-INSERT');",
                    "    } else {",
                    "        postman.setNextRequest('1_OLD_old-opportunity-bs-preprod-esb');",
                    "    }",
                    "    pm.test('Verify HTTP Response Code', function () {",
                    "        pm.expect(pm.response.code).to.equal(200);",
                    "    });",
                    "}",
                    "",
                    "main();",
                    ""
                ],
                "type": "text/javascript"
            }
        }
    ],
    "request": {
        "method": "POST",
        "header": [],
        "body": {
            "mode": "raw",
            "raw": "{{bodyParam}}",
            "options": {
                "raw": {
                    "language": "json"
                }
            }
        },
        "url": {
            "raw": "{{stub-master}}/c2p/{{type}}",
            "host": [
                "{{stub-master}}"
            ],
            "path": [
                "c2p",
                "{{type}}"
            ]
        }
    },
    "response": []
},{
        "name": "1_OLD_old-opportunity-bs-preprod-esb",
        "event": [
            {
                "listen": "prerequest",
                "script": {
                    "exec": [
                        "const iter = pm.info.iteration;",
    "if(iter == 0) {",
        "let global_ignore = null; let ignore_value = null; let field_decimal_as_integer = null;let ignore_if_not_found = null;",
"    global_ignore = pm.iterationData.get('1_global_ignore');",
"    pm.globals.set('1_global_ignore', global_ignore);",
"",
"    ignore_value = pm.iterationData.get('1_ignore_value');",
"    pm.globals.set('1_ignore_value', ignore_value);",
"",
"    field_decimal_as_integer = pm.iterationData.get('1_field_decimal_as_integer');",
"    pm.globals.set('1_field_decimal_as_integer', field_decimal_as_integer);",
"",
"    ignore_if_not_found = pm.iterationData.get('1_ignore_if_not_found');",
"    pm.globals.set('1_ignore_if_not_found', ignore_if_not_found);",
    "}",
                        "function generateRandomTransactionID(globalName, transaction_id = '', length = 25){",
    "",
    "    function generateNDigitNumber(n) {",
    "        var add = 1, max = 12 - add;",
    "        if ( n > max ) return generate(max) + generate(n - max);",
    "        max        = Math.pow(10, n+add);",
    "        var min    = max/10;",
    "        var number = Math.floor( Math.random() * (max - min + 1) ) + min;",
    "        return ('' + number).substring(add); ",
    "    }",
    "",
    "    const date = new Date();",
    "    let timestamp = date.valueOf().toString();",
    "    const sisa = length - 1 - transaction_id.length;",
    "    let middleRandomNumber = '';",
    "    if(sisa > timestamp.length) {",
    "        middleRandomNumber = generateNDigitNumber(sisa - timestamp.length);",
    "    } else {",
    "        timestamp = timestamp.slice(timestamp.length - sisa, timestamp.length)",
    "    }",
    "",
    "    const trx_id = `${transaction_id}-${middleRandomNumber}${timestamp}`;",
    "    pm.globals.set(globalName, trx_id);",
    "    return trx_id;",
    "}",
    "",
    
                        "const trx_id = generateRandomTransactionID('transaction_id_old', pm.iterationData.get('transaction_id'));",
                        
                        "let jsonDataQP = pm.iterationData.toJSON();",
        "let valuesQP = jsonDataQP.values;",
        "let stepQP = 1;",
        "let queryParams = '';",
        "let foundSeparationQP = 0;",
        "for (let index = 0; index < valuesQP.length; ++index) {",
        "    key = valuesQP[index].key.split('.')[0];",
        "    splittedKey = key.split('_');",
        "    nStep = splittedKey[0];",
        "    splittedKey.shift(); ",
        "    key = splittedKey.join('_')",
        "    if(parseInt(nStep,10) != parseInt(stepQP,10)) continue;",
        "    if(key === 'separation_query_params') {",
        "        if(valuesQP[index].value !== 'SKIP' || foundSeparationQP == 0){",
        "          foundSeparationQP = 1;",
        "          continue;",
        "        }",
        "    }",
        "    if(key === 'end_separation_query_params') {",
        "        if(valuesQP[index].value !== 'SKIP'){",
        "            foundSeparationQP = foundSeparationQP - 1;",
        "            continue;",
        "        } ",
        "    }",
        "",
        "    if(foundSeparationQP){",
        "        if(valuesQP[index].value !== 'SKIP'){",
        "            value = valuesQP[index].value.replace(/'/g, \"\\\"\");",
        "            if(queryParams.length === 0) {",
        "                if(key === 'transaction_id')",
        "                   queryParams = `transaction_id=${trx_id}`;",
        "                else {",
        "                    if(value === '#NULL'){",
        "                        queryParams = `${key}=null`;",
        "                    } else {",
        "                        queryParams = `${key}=${valuesQP[index].value}`;",
        "                    }",
        "                }",
        "            } else {",
        "                if(key === 'transaction_id')",
        "                   queryParams = `${queryParams}&transaction_id=${trx_id}`;",
        "                else {",
        "                    if(value === '#NULL'){",
        "                        queryParams = `${queryParams}&${key}=null`;",
        "                    } else {",
        "                        queryParams = `${queryParams}&${key}=${valuesQP[index].value}`;",
        "                    }",
        "                }",
        "            }",
        "        }",
        "    }",
        "}",
        "pm.globals.set('query_params', queryParams);"
                    ],
                    "type": "text/javascript"
                }
            },
            {
                "listen": "test",
                "script": {
                    "exec": [
                        "function expectedContentTypeHTTPHeader(isSkip, contentType){",
                        "    (isSkip ? pm.test.skip : pm.test)('Verify Content Type HTTP Headers', function () {",
                        "        pm.response.to.have.header('Content-Type');",
                        "        pm.expect(pm.response.headers.get('Content-Type')).to.contain(contentType);",
                        "    });",
                        "}",
                        "",
                        "function expectedHTTPResponseCode(isSkip, code){",
                        "    (isSkip ? pm.test.skip : pm.test)('Verify HTTP Response Code', function () {",
                        "        pm.expect(pm.response.code).to.equal(parseInt(code));",
                        "    });",
                        "}",
                        "",
                        "function main() {",
                        "    let shouldBeSkipped = false;",
                        "    if(pm.iterationData.get('enable_csv') == 'NO'){",
                        "        shouldBeSkipped = true;",
                        "    }",
                        
                        
                        "",
                        "    expectedHTTPResponseCode(shouldBeSkipped, pm.iterationData.get('1_expected_http_code_old'));",
                        "    if(pm.iterationData.get('1_expected_content_type_old')) expectedContentTypeHTTPHeader(shouldBeSkipped, pm.iterationData.get('1_expected_content_type_old'));",
                        "",
                        "    if (pm.iterationData.get('is_json') === 'YES') {",
                        "    var resBody = pm.response.json();",
                        "    pm.globals.set('resBodyOldService', JSON.stringify(resBody));",
                        "    }",
                        "    pm.globals.set('resBodyOldText', pm.response.text());",
                        "}",
                        "",
                        "main();"
                    ],
                    "type": "text/javascript"
                }
            }
        ],
        "request": {
            "method": "GET",
            "header": [{"key": "Content-Type","value": "application/json","type": "text"}],
            "body": {
                "mode": "raw",
                "raw": "",
                "options": {
                    "raw": {
                        "language": "json"
                    }
                }
            },
            "url": {
                "host": [
                    "{{old-opportunity-bs-preprod-esb}}"
                ]
                ,"path":["esb","v2","opportunities"]
                ,"query":[{"key": "{{query_params}}","value": null}]
            }
        },
        "response": []
    },{
        "name": "1_NEW_opportunity-bs-preprod-esb",
        "event": [
            {
                "listen": "prerequest",
                "script": {
                    "exec": [
                        "function generateRandomTransactionID(globalName, transaction_id = '', length = 25){",
    "",
    "    function generateNDigitNumber(n) {",
    "        var add = 1, max = 12 - add;",
    "        if ( n > max ) return generate(max) + generate(n - max);",
    "        max        = Math.pow(10, n+add);",
    "        var min    = max/10;",
    "        var number = Math.floor( Math.random() * (max - min + 1) ) + min;",
    "        return ('' + number).substring(add); ",
    "    }",
    "",
    "    const date = new Date();",
    "    let timestamp = date.valueOf().toString();",
    "    const sisa = length - 1 - transaction_id.length;",
    "    let middleRandomNumber = '';",
    "    if(sisa > timestamp.length) {",
    "        middleRandomNumber = generateNDigitNumber(sisa - timestamp.length);",
    "    } else {",
    "        timestamp = timestamp.slice(timestamp.length - sisa, timestamp.length)",
    "    }",
    "",
    "    const trx_id = `${transaction_id}-${middleRandomNumber}${timestamp}`;",
    "    pm.globals.set(globalName, trx_id);",
    "    return trx_id;",
    "}",
    "",
    
                        "const trx_id = generateRandomTransactionID('transaction_id_new', pm.iterationData.get('transaction_id'));",
                        
                        "let jsonDataQP = pm.iterationData.toJSON();",
        "let valuesQP = jsonDataQP.values;",
        "let stepQP = 1;",
        "let queryParams = '';",
        "let foundSeparationQP = 0;",
        "for (let index = 0; index < valuesQP.length; ++index) {",
        "    key = valuesQP[index].key.split('.')[0];",
        "    splittedKey = key.split('_');",
        "    nStep = splittedKey[0];",
        "    splittedKey.shift(); ",
        "    key = splittedKey.join('_')",
        "    if(parseInt(nStep,10) != parseInt(stepQP,10)) continue;",
        "    if(key === 'separation_query_params') {",
        "        if(valuesQP[index].value !== 'SKIP' || foundSeparationQP == 0){",
        "          foundSeparationQP = 1;",
        "          continue;",
        "        }",
        "    }",
        "    if(key === 'end_separation_query_params') {",
        "        if(valuesQP[index].value !== 'SKIP'){",
        "            foundSeparationQP = foundSeparationQP - 1;",
        "            continue;",
        "        } ",
        "    }",
        "",
        "    if(foundSeparationQP){",
        "        if(valuesQP[index].value !== 'SKIP'){",
        "            value = valuesQP[index].value.replace(/'/g, \"\\\"\");",
        "            if(queryParams.length === 0) {",
        "                if(key === 'transaction_id')",
        "                   queryParams = `transaction_id=${trx_id}`;",
        "                else {",
        "                    if(value === '#NULL'){",
        "                        queryParams = `${key}=null`;",
        "                    } else {",
        "                        queryParams = `${key}=${valuesQP[index].value}`;",
        "                    }",
        "                }",
        "            } else {",
        "                if(key === 'transaction_id')",
        "                   queryParams = `${queryParams}&transaction_id=${trx_id}`;",
        "                else {",
        "                    if(value === '#NULL'){",
        "                        queryParams = `${queryParams}&${key}=null`;",
        "                    } else {",
        "                        queryParams = `${queryParams}&${key}=${valuesQP[index].value}`;",
        "                    }",
        "                }",
        "            }",
        "        }",
        "    }",
        "}",
        "pm.globals.set('query_params', queryParams);"
                    ],
                    "type": "text/javascript"
                }
            },
            {
                "listen": "test",
                "script": {
                    "exec": [
                        "let referenceObjectMapNEW = {",
                        "}",
                        "",
                        "function findOnIndexObject(object, needle){",
                            "for (const [index, [key, value]] of Object.entries(Object.entries(object))) {",
                                "if(key === needle){",
                                    "return true;",
                                "}",
                            "}",
                            "return false;",
                        "}",
                        "function createListReadablePath(payload, parent = '', stackArray = [], withValue = false) {",
                        "    let list = null;",
                        "    if(withValue) list = {...stackArray};",
                        "    else list = [...stackArray];",
                        "",
                        "    if(payload !== null) {",
                        "        if(Array.isArray(payload)) {",
                        "            for(let i = 0; i < payload.length; i++) {",
                        "                const escaped = parent.replace(new RegExp('\\\\/\\\\[\\\\\"(.*?)\"\\\\]\\\\/','g'), '/');",
                        "                let newList = '';",
                        "                if(typeof referenceObjectMapNEW[escaped] != \"undefined\") {",
                                            "if(Array.isArray(list)) {",
                                                "if(list.includes(`${parent}/[\"${referenceObjectMapNEW[escaped].identifier(payload[i])}\"]`)){",
                                                    "increment = 0;",
                                                    "while(list.includes(`${parent}/[\"${referenceObjectMapNEW[escaped].identifier(payload[i])}-${increment}\"]`)){",
                                                        "increment++;",
                                                    "}",
                                                    "newlist = `${parent}/[\"${referenceObjectMapNEW[escaped].identifier(payload[i])}-${increment}\"]`;",
                                                "} else {",
                                                    "newlist = `${parent}/[\"${referenceObjectMapNEW[escaped].identifier(payload[i])}\"]`;",
                                                "}",
                                            "} else {",
                                                "if(findOnIndexObject(list,`${parent}/[\"${referenceObjectMapNEW[escaped].identifier(payload[i])}\"]`)){",
                                                    "increment = 0;",
                                                    "while(findOnIndexObject(list,`${parent}/[\"${referenceObjectMapNEW[escaped].identifier(payload[i])}-${increment}\"]`)){",
                                                        "increment++;",
                                                    "}",
                                                    "newlist = `${parent}/[\"${referenceObjectMapNEW[escaped].identifier(payload[i])}-${increment}\"]`;",
                                                "} else {",
                                                    "newlist = `${parent}/[\"${referenceObjectMapNEW[escaped].identifier(payload[i])}\"]`;",
                                                "}",
                                                "",
                                            "}",
                        "                } else {",
                        "                    newlist = `${parent}/${i}`;",
                        "                }",
                        "                ",
                        "                if(withValue) list = {...list, [newlist]: payload[i]};",
                        "                else list.push(newlist);",
                        "",
                        "                if(Array.isArray(payload[i]) || typeof(payload[i]) === \"object\") {",
                        "                    list = createListReadablePath(payload[i], newlist, list, withValue);",
                        "                }",
                        "            }",
                        "        } else if(typeof(payload) === \"object\") {",
                        "            let referenceKeys = Object.keys(payload);",
                        "            for(let i = 0; i < referenceKeys.length; i++) {",
                        "                let key = referenceKeys[i];",
                        "                newlist = `${parent}/${referenceKeys[i]}`;",
                        "                if(withValue) list = {...list, [newlist]: payload[key]};",
                        "                else list.push(newlist);",
                        "",
                        "                if(Array.isArray(payload[key]) || typeof(payload[key]) === \"object\") {",
                        "                    list = createListReadablePath(payload[key], newlist, list, withValue);",
                        "                }",
                        "            }",
                        "        }",
                        "    }",
                        "    return list;",
                        "}",
                        "",
                        "function checkPathExistInPayloadAsArrayOfPathString(stack, needle, deduction = 1) {",
                        "    const splitNeedle = needle.split('/*');",
                        "    checkMoreStarOnNeedle = splitNeedle.slice(1).join('/*');",
                        "",
                        "    const filteredStackToCount = stack.filter(s => s.includes(splitNeedle[0])).map(str => str.split(new RegExp(`${splitNeedle[0]}/\\\\d+/`))[0]).filter(s => s !== '');",
                        "    let filteredStackAfterSlash = {};",
                        "    if(checkMoreStarOnNeedle.includes('/*')) {",
                        "        const filteredAndMappedStack = stack.filter(s => s.includes(splitNeedle[0])).map(str => '/' + str.split(new RegExp(`${splitNeedle[0]}/\\\\d+/`)).slice(1).join()).filter(s => s !== '/');",
                        "        flag = checkPathExistInPayloadAsArrayOfPathString(filteredAndMappedStack,checkMoreStarOnNeedle, filteredStackToCount.length - deduction);",
                        "        if(!flag) return flag;",
                        "    }",
                        "",
                        "    filteredStackAfterSlash = stack.filter(s => s.includes(splitNeedle[0])).map(str => str.split(new RegExp(`${splitNeedle[0]}/\\\\d+/\\\\w+\\/`))[0]).filter(s => s !== '').filter(s => s.match(new RegExp(`${splitNeedle[0]}/\\\\d+/\\\\w+`)));",
                        "    const count = filteredStackAfterSlash.filter(s => s.match(new RegExp(splitNeedle[0] + '\\/\\\\d+' + splitNeedle[1].replace('/','/\\\\b') + '\\\\b')));",
                        "    return count.length === filteredStackToCount.length - deduction;",
                        "}",
                        "",
                        "function checkIsPathIgnored(ignoredPath, pathString){",
                        "if(ignoredPath == '') return false;",
                        "    let structuredKey = [];",
                        "    if(ignoredPath.includes('*')) {",
                        "        let splittedText = ignoredPath.split('*');",
                        "        let splittedKey = pathString;",
                        "        if(splittedText.length > 1) {",
                        "            for(let j = 0; j < splittedText.length; j++) {",
                        "                splittedKey = splittedKey.split(splittedText[j]);",
                        "                if(splittedKey.length > 1) {",
                        "                    structuredKey.push(splittedText[j]);",
                        "                    if(splittedKey[1].includes('/')){",
                        "                        splittedKey[1] = splittedKey[1].replace(new RegExp('(.*?)/'), '/');",
                        "                        splittedKey.shift();",
                        "                        splittedKey = splittedKey.join('');",
                        "                    } else {",
                        "                        splittedKey = \"\";",
                        "                    }",
                        "                } else {",
                        "                    splittedKey = splittedKey.join('');",
                        "                    structuredKey.push(splittedKey);",
                        "                    break;",
                        "                }",
                        "            }",
                        "        } else {",
                        "            structuredKey.push(splittedKey);",
                        "        }",
                        "    }",
                        "    mergedKey = structuredKey.join('*');",
                        "    if(mergedKey === \"\") mergedKey = pathString;",
                        "    cekIgnore = mergedKey.startsWith(ignoredPath);",
                        "    return cekIgnore;",
                        "}",
                        "",
                        "function fieldNotFoundAToB(isSkip, listReadableAResponse, listReadableBResponse, listReadableAWithValue, ignored = [], ignoredIfANull = [], label = ['A', 'B']) {",
                        "    const ignoredFields = ignored;",
                        "    const ignoredFieldsIfOldNull = ignoredIfANull;",
                        "    ",
                        "    (isSkip ? pm.test.skip : pm.test)(`FIELD-NOT-FOUND-${label[0]}-TO-${label[1]}: Response field ${label[0]} doesnt exist in response field ${label[1]}`, function () {",
                        "        let flag = 0;",
                        "        let notFound = [];",
                        "        for(let i = 0; i < listReadableAResponse.length; i++) {",
                        "            cekIgnoreIfNull = ignoredFieldsIfOldNull.find(f => listReadableAResponse[i].replace(new RegExp('\\/\\\\d+','g'), '/*').startsWith(f));",
                        "            if(typeof cekIgnoreIfNull != 'undefined') {",
                        "                const obj = listReadableAWithValue[listReadableAResponse[i]];",
                        "                if(obj == null || obj == '' || (obj && Object.keys(obj).length === 0 && obj.constructor === Object)) continue;",
                        "            }",
                        "",
                        "            let is_continue = false;",
                        "            for(let j = 0; j < ignoredFields.length; j++) {",
                        "                cekIgnore = checkIsPathIgnored(ignoredFields[j], listReadableAResponse[i]);",
                        "                if(cekIgnore) {",
                        "                    is_continue = true;",
                        "                    break;",
                        "                };",
                        "            }",
                        "            if(is_continue) continue;",
                        "",
                        "            if(listReadableAResponse[i].includes('*')) {",
                        "                flag = checkPathExistInPayloadAsArrayOfPathString(listReadableBResponse,listReadableAResponse[i]);",
                        "                if(!flag) {",
                        "                    if(!listReadableAResponse[i].includes(notFound[notFound.length - 1])) {",
                        "                        notFound.push(listReadableAResponse[i]);",
                        "                        flag++;",
                        "                    }",
                        "                }",
                        "            } else {",
                        "                if(!listReadableBResponse.includes(listReadableAResponse[i])) {",
                        "                    if(!listReadableAResponse[i].includes(notFound[notFound.length - 1])) {",
                        "                        notFound.push(listReadableAResponse[i]);",
                        "                        flag++;",
                        "                    }",
                        "                }",
                        "            }",
                        "        }",
                        "        if(notFound.length) {",
                        "            let text =`${label[0]} SERVICE Field not found in ${label[1]} SERVICE response (${notFound.length} field/s) : \\n`;",
                        "            notFound.forEach((entry) => {",
                        "                text += `- ${entry}\\n`;",
                        "            });",
                        "            console.log(text);",
                        "        }",
                        "",
                        "        pm.expect(0).to.equal(flag === 0 ? flag : `${notFound.length} field/s Not Found`);",
                        "    });",
                        "}",
                        "",
                        "function differentFieldValue(isSkip, listReadableA, listReadableB, listReadableBResponse, ignored = [], ignoredValues = [], expectedDifferents = [], exceptionalChecker = [], label = ['A', 'B']) {",
                        "    (isSkip ? pm.test.skip : pm.test)('DIFFERENT-FIELD-VALUE: Response field that has different value', function () {",
                        "        let flag = 0;",
                        "        let different = [];",
                        "        for (const [key, value] of Object.entries(listReadableA)) {",
                        "            let is_continue = false;",
                        "            for(let j = 0; j < ignoredValues.length; j++) {",
                        "                if(key.includes(ignoredValues[j])){",
                        "                    is_continue = true;",
                        "                    break;",
                        "                }",
                        "            }",
                        "            if(is_continue) continue;",
                        "",
                        "            is_continue = false;",
                        "            for(let j = 0; j < ignored.length; j++) {",
                        "                cekIgnore = checkIsPathIgnored(ignored[j], key);",
                        "                if(cekIgnore) {",
                        "                    is_continue = true;",
                        "                    break;",
                        "                };",
                        "            }",
                        "            if(is_continue) continue;",
                        "            if(!key.includes('*') && listReadableBResponse.includes(key)) {",
                        "                if(typeof value !== 'object') {",
                        "                    if(expectedDifferents.find(f => f === key)) continue;",
                        "                    if(exceptionalChecker.includes(key)) {",
                        "                        if(parseInt(value) !== parseInt(listReadableB[key])){",
                        "                            different.push(`${label[0]} ${key}: ${value} != ${label[1]} ${key}: ${listReadableB[key]}`);",
                        "                            flag++;",
                        "                        }",
                        "                    } else if(value !== listReadableB[key]) {",
                        "                        different.push(`${label[0]} ${key}: ${value} != ${label[1]} ${key}: ${listReadableB[key]}`);",
                        "                        flag++;",
                        "                    }",
                        "                }",
                        "            }",
                        "        }",
                        "",
                        "        if(different.length) {",
                        "            let text =`Different field value (${different.length} field/s) : \\n`;",
                        "            different.forEach((entry) => {",
                        "                text += `- ${entry}\\n`;",
                        "            });",
                        "            console.log(text);",
                        "        }",
                        "",
                        "        pm.expect(0).to.equal(flag === 0 ? flag : `${different.length} field/s Different`);",
                        "    });",
                        "}",
                        "",
                        "function expectedHTTPResponseCode(isSkip, code){",
                        "    (isSkip ? pm.test.skip : pm.test)('Verify HTTP Response Code', function () {",
                        "        pm.expect(pm.response.code).to.equal(parseInt(code));",
                        "    });",
                        "}",
                        "",
                        "function expectedResponseStatusCode(isSkip, json, code){",
                        "    (isSkip ? pm.test.skip : pm.test)('Expected Response Status Code', function () {",
                        "        pm.expect(json.transaction.status_code).to.equal(code);",
                        "    });",
                        "}",
                        "",
                        "function checkParameter(isSkip, listReadable, listReadableWithValue, parameters, mandatory = true, notNull = true){",
                        "    (isSkip ? pm.test.skip : pm.test)(`Check Payload Mandatory = ${mandatory ? 'Yes' : 'No'} and Not Null = ${notNull ? 'Yes' : 'No'}`, function () {",
                        "        let falseNotes = [];",
                        "        let succesNotes = [];",
                        "        for(let i = 0; i < parameters.length; i++) {",
                        "            count = 0;",
                        "            if(parameters[i].includes('*')){",
                        "                let splittedText = parameters[i].split('*');",
                        "                joinText = '';",
                        "                for(let j = 0; j < splittedText.length - 1; j++) {",
                        "                    joinText = joinText + splittedText[j] + '*'",
                        "                }",
                        "",
                        "                joinText = joinText.substring(0, joinText.length - 2);",
                        "",
                        "                for(let j = 0; j < listReadable.length; j++) {",
                        "                    cekIgnore = checkIsPathIgnored(joinText, listReadable[j]);",
                        "                    if(cekIgnore){",
                        "                        if(joinText.split('/').length == listReadable[j].split('/').length){",
                        "                            if(!isNaN(listReadableWithValue[listReadable[j]].length)) {",
                        "                                count = count + listReadableWithValue[listReadable[j]].length;",
                        "                            } else {",
                        "                                count = count + 1;",
                        "                            }",
                        "                        }",
                        "                    }",
                        "                }",
                        "            } else {",
                        "                for(let j = 0; j < listReadable.length; j++) {",
                        "                    cekIgnore = checkIsPathIgnored(parameters[i], listReadable[j]);",
                        "                    if(cekIgnore){",
                        "                        if(parameters[i].split('/').length == listReadable[j].split('/').length){",
                        "                            if (typeof listReadableWithValue[listReadable[j]] === 'string' || listReadableWithValue[listReadable[j]] instanceof String) {",
                        "                                count = count + 1;",
                        "                            } else if(!isNaN(listReadableWithValue[listReadable[j]].length)) {",
                        "                                count = count + listReadableWithValue[listReadable[j]].length;",
                        "                            } else {",
                        "                                count = count + 1;",
                        "                            }",
                        "                        }",
                        "                    }",
                        "                }",
                        "            }",
                        "            ",
                        "            is_found = 0;",
                        "            if(notNull) {",
                        "              for(let j = 0; j < listReadable.length; j++) {",
                        "                cekIgnore = checkIsPathIgnored(parameters[i], listReadable[j]);",
                        "                if(cekIgnore){",
                        "                    if(listReadableWithValue[listReadable[j]] != null && listReadableWithValue[listReadable[j]] != '') {",
                        "                        nExpected = parameters[i].split('/');",
                        "                        nFound = listReadable[j].split('/');",
                        "                        if(nExpected.length == nFound.length){",
                        "                            is_found = is_found + 1;",
                        "                        }",
                        "                    }",
                        "                }",
                        "              }",
                        "            }",
                        "",
                        "            if(mandatory) {",
                        "              if (count == 0) {",
                        "                falseNotes.push(`${parameters[i]} is not found`);",
                        "              } else {",
                        "                if(notNull){",
                        "                  falseNotes.push(`${parameters[i]}: ${count} found, ${count - is_found} Null`);",
                        "                } else {",
                        "                  succesNotes.push(`${parameters[i]}: ${count} found`);",
                        "                }",
                        "              ",
                        "              }",
                        "            } else {",
                        "              if(notNull) {",
                        "                if(is_found != count && count != 0) {",
                        "                  falseNotes.push(`${parameters[i]}: ${count} found, ${count - is_found} Null or '`);",
                        "                } else {",
                        "                  succesNotes.push(`${parameters[i]} is ${count},${is_found} found`);",
                        "                }",
                        "              }",
                        "            }",
                        "        }",
                        "",
                        "        if(falseNotes.length) {",
                        "            let text =`Defect Notes Mandatory = ${mandatory ? 'Yes' : 'No'} and Not Null = ${notNull ? 'Yes' : 'No'} (${falseNotes.length} field/s) : \n`;",
                        "            falseNotes.forEach((entry) => {",
                        "                text += `- ${entry}\\n`;",
                        "            });",
                        "            console.log(text);",
                        "        }",
                        "",
                        "        if(succesNotes.length) {",
                        "            let text =`Success Notes Mandatory = ${mandatory ? 'Yes' : 'No'} and Not Null = ${notNull ? 'Yes' : 'No'} (${succesNotes.length} field/s) : \\n`;",
                        "            succesNotes.forEach((entry) => {",
                        "                text += `- ${entry}\\n`;",
                        "            });",
                        "            console.log(text);",
                        "        }",
                        "",
                        "        pm.expect(0).to.equal(falseNotes.length === 0 ? 0 : `${falseNotes.length} field/s Defect`)",
                        "    });",
                        "}",
                        "function columnIsNotValue(isSkip, listReadable, listReadableWithValue, parameters, mandatory = true, notNull = true){",
                        "    (isSkip ? pm.test.skip : pm.test)(`Check parameter is not the same value with input`, function () {",
                        "        let falseNotes = [];",
                        "        let successNotes = [];",
                        "        for(let i = 0; i < parameters.length; i++) {",
                        "            splits = parameters[i].split('=');",
                        "            key = splits[0];",
                        "            value = splits[1];",
                        "            console.log(key, value, listReadableWithValue[key]);",
                        "            if(typeof listReadableWithValue[key] != 'undefined') {",
                        "                if(typeof listReadableWithValue[key] === 'string') {",
                        "                    if(listReadableWithValue[key] == value) {",
                        "                        falseNotes.push(`${key} : ${listReadableWithValue[key]} == ${value}`);",
                        "                    } else {",
                        "                        successNotes.push(`${key} : ${listReadableWithValue[key]} != ${value}`);",
                        "                    }",
                        "                }",
                        "            }",
                        "        }",
                        "",
                        "        if(falseNotes.length) {",
                        "            let text =`Defect Notes parameter is not the same value with input (${falseNotes.length} field/s) : \\n`;",
                        "            falseNotes.forEach((entry) => {",
                        "                text += `- ${entry}\\n`;",
                        "            });",
                        "            console.log(text);",
                        "        }",
                        "",
                        "        if(successNotes.length) {",
                        "            let text =`Success Notes parameter is not the same value with input (${falseNotes.length} field/s) : \\n`;",
                        "            successNotes.forEach((entry) => {",
                        "                text += `- ${entry}\\n`;",
                        "            });",
                        "            console.log(text);",
                        "        }",
                        "",
                        "        pm.expect(0).to.equal(falseNotes.length === 0 ? 0 : `${falseNotes.length} field/s Defect`);",
                        "    });",
                        "}",
                        "", "function columnIsNotValue(isSkip, listReadable, listReadableWithValue, parameters, mandatory = true, notNull = true){",
                        "    (isSkip ? pm.test.skip : pm.test)(`Check parameter is not the same value with input`, function () {",
                        "        let falseNotes = [];",
                        "        let successNotes = [];",
                        "        for(let i = 0; i < parameters.length; i++) {",
                        "            splits = parameters[i].split('=');",
                        "            key = splits[0];",
                        "            value = splits[1];",
                        "            console.log(key, value, listReadableWithValue[key]);",
                        "            if(typeof listReadableWithValue[key] != 'undefined') {",
                        "                if(typeof listReadableWithValue[key] === 'string') {",
                        "                    if(listReadableWithValue[key] == value) {",
                        "                        falseNotes.push(`${key} : ${listReadableWithValue[key]} == ${value}`);",
                        "                    } else {",
                        "                        successNotes.push(`${key} : ${listReadableWithValue[key]} != ${value}`);",
                        "                    }",
                        "                }",
                        "            }",
                        "        }",
                        "",
                        "        if(falseNotes.length) {",
                        "            let text =`Defect Notes parameter is not the same value with input (${falseNotes.length} field/s) : \\n`;",
                        "            falseNotes.forEach((entry) => {",
                        "                text += `- ${entry}\\n`;",
                        "            });",
                        "            console.log(text);",
                        "        }",
                        "",
                        "        if(successNotes.length) {",
                        "            let text =`Success Notes parameter is not the same value with input (${falseNotes.length} field/s) : \\n`;",
                        "            successNotes.forEach((entry) => {",
                        "                text += `- ${entry}\\n`;",
                        "            });",
                        "            console.log(text);",
                        "        }",
                        "",
                        "        pm.expect(0).to.equal(falseNotes.length === 0 ? 0 : `${falseNotes.length} field/s Defect`);",
                        "    });",
                        "}",
                        "",
                        "function expectedContentTypeHTTPHeader(isSkip, contentType){",
                        "    (isSkip ? pm.test.skip : pm.test)('Verify Content Type HTTP Headers', function () {",
                        "        pm.response.to.have.header('Content-Type');",
                        "        pm.expect(pm.response.headers.get('Content-Type')).to.contain(contentType);",
                        "    });",
                        "}",
                        "",
                        "function main(){    ",
                        "    try {",
                        "        let shouldBeSkipped = false;",
                        "        if(pm.iterationData.get('enable_csv') == 'NO'){",
                        "            shouldBeSkipped = true;",
                        "        }",
                        "",
                        "        if (pm.iterationData.get('scenario_type') === 'Negative') {",
                        "            postman.setNextRequest(null);",
                        "        }",
                        "        ",
                        "        expectedHTTPResponseCode(shouldBeSkipped, pm.iterationData.get('1_expected_http_code_new'));",
                        "        if(pm.iterationData.get('1_expected_content_type_new')) expectedContentTypeHTTPHeader(shouldBeSkipped, pm.iterationData.get('1_expected_content_type_new'));",
                        "        let resBodyOldText = pm.globals.get('resBodyOldText');",
                        "        ",
                        "    if (pm.iterationData.get('is_json') === 'YES') {",
                        "        let resBodyOldService = JSON.parse(pm.globals.get('resBodyOldService'));",
                        "        var resBody = pm.response.json();",
                        "",
                        "        const listReadableNewResponse = createListReadablePath(resBody, '', []);",
                        "        const listReadableNew = createListReadablePath(resBody, '', [], true);",
                        "        const listReadableOldResponse = createListReadablePath(resBodyOldService, '', []);",
                        "        const listReadableOld = createListReadablePath(resBodyOldService, '', [], true);",
                        "",
                        "        let ignoredFieldsIfOldNull = [];",
                        "        let expectedDifferents = [];",
                        "",
                        "        let ignoredFields = pm.globals.get('1_global_ignore');",
                        "        if(ignoredFields) ignoredFields = ignoredFields.split('|');",
                        "        else ignoredFields = [];",
                        "",
                        "        let ignoredFieldsSingleTC = pm.iterationData.get('1_ignore_single_tc');",
                        "        if(ignoredFieldsSingleTC) ignoredFieldsSingleTC = ignoredFieldsSingleTC.split('|');",
                        "        else ignoredFieldsSingleTC = [];",
                        "",
                        "        ignoredFields = [...ignoredFields, ...ignoredFieldsSingleTC];",
                        "",
                        "        let ignoredValues = pm.globals.get('1_ignore_value');",
                        "        if(ignoredValues) ignoredValues = ignoredValues.split('|');",
                        "        else ignoredValues = [];",
                        "",
                        "        let ignoreValueFieldsSingleTC = pm.iterationData.get('1_ignore_value_single_tc');",
                        "        if(ignoreValueFieldsSingleTC) ignoreValueFieldsSingleTC = ignoreValueFieldsSingleTC.split('|');",
                        "        else ignoreValueFieldsSingleTC = [];",
                        "",
                        "        ignoredValues = [...ignoredValues, ...ignoreValueFieldsSingleTC];",
                        "",
                        "        let ignoredIfNotFound = pm.globals.get('1_ignore_if_not_found');",
                        "        if(ignoredIfNotFound) ignoredIfNotFound = ignoredIfNotFound.split('|');",
                        "        else ignoredIfNotFound = [];",
                        "",
                        "        let fieldDecimalAsInteger = pm.globals.get('1_field_decimal_as_integer');",
                        "        if(fieldDecimalAsInteger) fieldDecimalAsInteger = fieldDecimalAsInteger.split('|');",
                        "        else fieldDecimalAsInteger = [];",
                        "",
                        "        let mandatoryParameters = pm.iterationData.get('1_mandatory_parameters');",
                        "        if(mandatoryParameters) mandatoryParameters = mandatoryParameters.split('|');",
                        "        else mandatoryParameters = [];",
                        "   ",
                        "        let not_null = pm.iterationData.get('1_not_null');",
                        "        if(not_null) not_null = not_null.split('|');",
                        "        else not_null = [];",
                        "        ",
                        "        let column_is_not_value = pm.iterationData.get('1_column_is_not_value');",
                        "        if(column_is_not_value) column_is_not_value = column_is_not_value.split('|');",
                        "        else column_is_not_value = [];",
                        "",
                        "        console.log('Global Ignore:\\n', ignoredFields.join('\\n'));",
                        "        console.log('Ignore If Not Found:\\n', ignoredIfNotFound.join('\\n'));",
                        "        console.log('Ignore Value:\\n', ignoredValues.join('\\n'));",
                        "        console.log('Field Decimal as Integer:\\n', fieldDecimalAsInteger.join('\\n'));",
                        "",
                        "        responseJson =  resBody;",
                        "        ",
                        "        if(!(pm.iterationData.get('exception') && resBodyOldText.includes(pm.iterationData.get('exception')))) {",
                        "            if(pm.iterationData.get('1_expected_status_code')) expectedResponseStatusCode(shouldBeSkipped, responseJson, pm.iterationData.get('1_expected_status_code'));",
                        "            if(pm.iterationData.get('1_mandatory_parameters')) checkParameter(shouldBeSkipped, listReadableNewResponse, listReadableNew, mandatoryParameters, true, false);",
                        "            if(pm.iterationData.get('1_not_null')) checkParameter(shouldBeSkipped, listReadableNewResponse, listReadableNew, not_null, false, true);",
                        "            if(pm.iterationData.get('1_column_is_not_value')) columnIsNotValue(shouldBeSkipped, listReadableNewResponse, listReadableNew, column_is_not_value);",
                        "            fieldNotFoundAToB(shouldBeSkipped,listReadableNewResponse, listReadableOldResponse, listReadableNew, [...ignoredFields,...ignoredIfNotFound], [...ignoredFieldsIfOldNull],['NEW', 'OLD']);",
                        "            fieldNotFoundAToB(shouldBeSkipped, listReadableOldResponse, listReadableNewResponse, listReadableOld, [...ignoredFields,...ignoredIfNotFound], [],['OLD', 'NEW']);",
                        "            differentFieldValue(shouldBeSkipped, listReadableOld, listReadableNew, listReadableNewResponse, ignoredFields, [...ignoredValues] ,[...expectedDifferents], [...fieldDecimalAsInteger], ['OLD', 'NEW']);",
                        "        }",
                        "        }",
                        "    } catch (error) {",
                        "        console.log('CODE ERROR: ' + error);",
                        "    }",
                        "}",
                        "",
                        "main();"
                    ],
                    "type": "text/javascript"
                }
            }
        ],
        "request": {
            "method": "GET",
            "header": [{"key": "Content-Type","value": "application/json","type": "text"}],
            "body": {
                "mode": "raw",
                "raw": "",
                "options": {
                    "raw": {
                        "language": ""
                    }
                }
            },
            "url": {
                "host": [
                    "{{opportunity-bs-preprod-esb}}"
                ]
                ,"path":["esb","v2","opportunities"]
                ,"query":[{"key": "{{query_params}}","value": null}]
            }
        },
        "response": []
    }],
        "event": [
            {
                "listen": "prerequest",
                "script": {
                    "type": "text/javascript",
                    "exec": [
                        ""
                    ]
                }
            },
            {
                "listen": "test",
                "script": {
                    "type": "text/javascript",
                    "exec": [
                        ""
                    ]
                }
            }
        ]
    }
